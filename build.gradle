buildscript {
    ext {
        springBootVersion = '1.4.3.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.5'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'

jar {
    baseName = 'testcontainers_example'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.boot:spring-boot-starter-web')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.testcontainers:testcontainers:1.1.7')
}


task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

task buildDist(type: Tar, group: 'Build', description: 'Builds the Tar distribution of the project.') {
    archiveName = "${rootProject.name}.tar"
    from(rootProject.projectDir) {
        exclude('**/build/**')
        exclude('**/*.tar')
        exclude('**/.gradle/**')
        exclude('**/.idea/**')
    }
}

task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                configuration.resolve()
            }
            subProject.configurations.each { configuration ->
                configuration.resolve()
            }
        }
    }
}

build.finalizedBy(project.tasks.buildDist)
project.tasks.buildDist.dependsOn(['build'])


import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.container.*

task buildImage(type: DockerBuildImage) {
    dependsOn buildDist
    inputDir = rootProject.projectDir
    tag = "dddpaul/${rootProject.name}"
}

task createContainer(type: DockerCreateContainer) {
    dependsOn buildImage
    targetImageId { buildImage.getImageId() }
    portBindings = ['8080:8080']
    binds = ['/var/run/docker.sock':'/var/run/docker.sock']
    cmd = ['--stacktrace', '--debug']
}

task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId { createContainer.getContainerId() }
}

task logContainer(type: DockerLogsContainer) {
    dependsOn startContainer
    targetContainerId { createContainer.getContainerId() }
    follow = true
    tailAll = true
    onNext { message ->
        logger.quiet message.toString()
    }
}

task waitContainer(type: DockerWaitContainer) {
    dependsOn logContainer
    targetContainerId { createContainer.getContainerId() }
}

task testContainer(type: Test) {
    dependsOn createContainer
    finalizedBy waitContainer
}
